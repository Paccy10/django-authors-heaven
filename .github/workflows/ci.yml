name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build: 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Add environment variables to .env file
        run: |
          echo ENVIRONMENT=${{ secrets.ENVIRONMENT }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo DEBUG=${{ secrets.DEBUG }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo PG_ENGINE=${{ secrets.PG_ENGINE }} >> .env
          echo PG_USER=${{ secrets.PG_USER }} >> .env
          echo PG_PASSWORD=${{ secrets.PG_PASSWORD }} >> .env
          echo PG_DB=${{ secrets.PG_DB }} >> .env
          echo PG_HOST=${{ secrets.PG_HOST }} >> .env
          echo PG_PORT=${{ secrets.PG_PORT }} >> .env
          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
          echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env
          echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
          echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env
          echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .env
          echo DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }} >> .env
          echo SOCIAL_SECRET=${{ secrets.SOCIAL_SECRET }} >> .env
          echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> .env
          echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> .env
          echo TWITTER_API_KEY=${{ secrets.TWITTER_API_KEY }} >> .env
          echo TWITTER_API_SECRET=${{ secrets.TWITTER_API_SECRET }} >> .env
          echo TWITTER_ACCESS_TOKEN_KEY=${{ secrets.TWITTER_ACCESS_TOKEN_KEY }} >> .env
          echo TWITTER_ACCESS_TOKEN_SECRET=${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }} >> .env
      
      - name: Build image
        run: make build
      
      - name: Check imports
        run: make isort-check

      - name: Check code quality
        run: make flake8
      
      - name: Check linting errors
        run: make black-check

      - name: Run tests and generate coverage report
        run: make test-xml

      - name: Coverage
        uses: paambaati/codeclimate-action@v2.5.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: docker compose exec api coverage xml